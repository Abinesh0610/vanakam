import rclpy
from rclpy.node import Node
from sensor_msgs.msg import PointCloud2, PointField
from sensor_msgs_py import point_cloud2 as pc2
from rclpy.qos import QoSProfile, QoSReliabilityPolicy
import math


class CroppedPointCloudProcessor(Node):
    def __init__(self):
        super().__init__('cropped_pointcloud_processor')

        qos = QoSProfile(depth=10)
        qos.reliability = QoSReliabilityPolicy.BEST_EFFORT

        # Subscriber
        self.subscription = self.create_subscription(
            PointCloud2,
            '/sensing/lidar/top/pointcloud',
            self.pointcloud_callback,
            qos
        )

        # Publisher
        self.publisher = self.create_publisher(
            PointCloud2,
            '/cropped_lidar',
            10
        )

    def pointcloud_callback(self, msg):
        self.get_logger().info("Received a pointcloud message!")

        # Read points from the PointCloud2 message
        points = list(pc2.read_points(msg, field_names=("x", "y", "z"), skip_nans=True))

        # Filter points based on angle
        cropped_points = []
        for x, y, z in points:
            angle = math.degrees(math.atan2(y, x)) + 90  # Apply phase shift to match LiDAR FOV
            if 80 <= angle <= 100:  # Crop forward-facing cone
                cropped_points.append((x, y, z))

        self.get_logger().info(f"Total points: {len(points)} | Cropped points: {len(cropped_points)}")

        if not cropped_points:
            return

        # Define the fields for x, y, z
        fields = [
            PointField(name="x", offset=0, datatype=PointField.FLOAT32, count=1),
            PointField(name="y", offset=4, datatype=PointField.FLOAT32, count=1),
            PointField(name="z", offset=8, datatype=PointField.FLOAT32, count=1),
        ]

        # Use the original header (timestamp and frame)
        header = msg.header
        cropped_cloud = pc2.create_cloud(header, fields, cropped_points)

        # Publish the cropped cloud
        self.publisher.publish(cropped_cloud)


def main(args=None):
    rclpy.init(args=args)
    node = CroppedPointCloudProcessor()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
